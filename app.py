import streamlit as st
import random
from deap import base, creator, tools, algorithms
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ ---
st.set_page_config(layout="wide")
st.title("üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ê–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
st.markdown("–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∏—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.")

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---
st.sidebar.header("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
target_sum = st.sidebar.slider("–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ –µ–¥–∏–Ω–∏—Ü", 10, 100, 45)
num_attributes = st.sidebar.slider("–î–ª–∏–Ω–∞ –±–∏—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏", 20, 150, 75)
num_generations = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π", 10, 200, 60)
p_crossover = st.sidebar.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è", 0.1, 1.0, 0.8, step=0.05)
p_mutation = st.sidebar.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏", 0.01, 0.5, 0.1, step=0.01)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏) ---
@st.cache_data # –≠—Ç–∞ –º–∞–≥–∏—è –∫—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
def run_ga(target, length, ngen, cxpb, mutpb):
    creator.create("FitnessMax", base.Fitness, weights=(1.0,))
    creator.create("Individual", list, fitness=creator.FitnessMax)

    toolbox = base.Toolbox()
    toolbox.register("attr_bool", random.randint, 0, 1)
    toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_bool, n=length)
    toolbox.register("population", tools.initRepeat, list, toolbox.individual)

    def eval_func(individual):
        return len(individual) - abs(sum(individual) - target),

    toolbox.register("evaluate", eval_func)
    toolbox.register("mate", tools.cxTwoPoint)
    toolbox.register("mutate", tools.mutFlipBit, indpb=0.05)
    toolbox.register("select", tools.selTournament, tournsize=3)
    
    population = toolbox.population(n=50)
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", np.mean)
    stats.register("max", np.max)

    result_pop, logbook = algorithms.eaSimple(population, toolbox, cxpb=cxpb, mutpb=mutpb, ngen=ngen, 
                                               stats=stats, verbose=False)
    return result_pop, logbook

# --- –ó–∞–ø—É—Å–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
result_pop, logbook = run_ga(target_sum, num_attributes, num_generations, p_crossover, p_mutation)

best_individual = tools.selBest(result_pop, k=1)[0]

st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
col1, col2, col3 = st.columns(3)
col1.metric("–õ—É—á—à–∏–π —Ñ–∏—Ç–Ω–µ—Å", f"{best_individual.fitness.values[0]:.2f}")
col2.metric("–°—É–º–º–∞ –µ–¥–∏–Ω–∏—Ü", f"{sum(best_individual)}")
col3.metric("–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞", f"{target_sum}")

st.write("**–õ—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É—É–º:**")
# –í—ã–≤–æ–¥–∏–º –±–∏—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
st.code(''.join(map(str, best_individual)), language=None)


st.header("–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
fig, ax1 = plt.subplots(figsize=(10, 4))
gen = logbook.select("gen")
max_fitness = logbook.select("max")
avg_fitness = logbook.select("avg")

ax1.plot(gen, max_fitness, "b-", label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å")
ax1.plot(gen, avg_fitness, "r-", label="–°—Ä–µ–¥–Ω–∏–π —Ñ–∏—Ç–Ω–µ—Å")
ax1.set_xlabel("–ü–æ–∫–æ–ª–µ–Ω–∏–µ")
ax1.set_ylabel("–§–∏—Ç–Ω–µ—Å")
ax1.legend(loc="lower right")
ax1.grid()
st.pyplot(fig)