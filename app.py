import streamlit as st
import random
import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import graphviz
import operator
import math
from deap import base, creator, tools, algorithms, gp, cma, benchmarks

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´ ---
st.set_page_config(
    layout="wide",
    page_title="–ê–Ω–∞–ª–∏–∑ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
    page_icon="üî¨"
)

# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–û–í DEAP (–¥–µ–ª–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑) ---
try:
    creator.create("FitnessMax", base.Fitness, weights=(1.0,))
    creator.create("Individual", list, fitness=creator.FitnessMax)
except Exception: pass
try:
    creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
    creator.create("IndividualCMA", list, fitness=creator.FitnessMin)
except Exception: pass
try:
    creator.create("FitnessMinGP", base.Fitness, weights=(-1.0,))
    creator.create("IndividualGP", gp.PrimitiveTree, fitness=creator.FitnessMinGP)
except Exception: pass

# --- –§–£–ù–ö–¶–ò–ò-–í–´–ß–ò–°–õ–ò–¢–ï–õ–ò ---

@st.cache_data
def run_genetic_algorithm(target_sum, n_attr, ngen, cxpb, mutpb, pop_size):
    toolbox = base.Toolbox()
    toolbox.register("attr_bool", random.randint, 0, 1)
    toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_bool, n=n_attr)
    toolbox.register("population", tools.initRepeat, list, toolbox.individual)
    def eval_func(individual):
        return len(individual) - abs(sum(individual) - target_sum),
    toolbox.register("evaluate", eval_func)
    toolbox.register("mate", tools.cxTwoPoint)
    toolbox.register("mutate", tools.mutFlipBit, indpb=0.05)
    toolbox.register("select", tools.selTournament, tournsize=3)
    population = toolbox.population(n=pop_size)
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", np.mean)
    stats.register("max", np.max)
    stats.register("min", np.min)
    stats.register("std", np.std)
    _, logbook = algorithms.eaSimple(population, toolbox, cxpb=cxpb, mutpb=mutpb, ngen=ngen, stats=stats, verbose=False)
    best_individual = tools.selBest(population, k=1)[0]
    return best_individual, logbook

@st.cache_data
def run_cma_es(func_name, ngen_cma, sigma, num_individuals=10):
    eval_func_cma, centroid_start = (benchmarks.rastrigin, [5.0]*num_individuals) if func_name == "–†–∞—Å—Ç—Ä–∏–≥–∏–Ω" else (benchmarks.rosenbrock, [0.0]*num_individuals)
    strategy = cma.Strategy(centroid=centroid_start, sigma=sigma, lambda_=20)
    toolbox_cma = base.Toolbox()
    toolbox_cma.register("evaluate", eval_func_cma)
    hall_of_fame = tools.HallOfFame(1)
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("min", np.min)
    logbook_cma = tools.Logbook()
    logbook_cma.header = ['gen', 'evals', 'min'] + list(strategy.values.keys())
    for gen in range(ngen_cma):
        population_cma = strategy.generate(creator.IndividualCMA)
        fitnesses = toolbox_cma.map(toolbox_cma.evaluate, population_cma)
        for ind, fit in zip(population_cma, fitnesses): ind.fitness.values = fit
        strategy.update(population_cma)
        hall_of_fame.update(population_cma)
        record = stats.compile(population_cma)
        logbook_cma.record(gen=gen, evals=len(population_cma), **record, **strategy.values)
    return logbook_cma, hall_of_fame

@st.cache_data
def run_symbolic_regression(ngen, pop_size):
    pset = gp.PrimitiveSet("MAIN", 1)
    pset.addPrimitive(operator.add, 2); pset.addPrimitive(operator.sub, 2); pset.addPrimitive(operator.mul, 2)
    toolbox = base.Toolbox()
    toolbox.register("expr", gp.genHalfAndHalf, pset=pset, min_=1, max_=2)
    toolbox.register("individual", tools.initIterate, creator.IndividualGP, toolbox.expr)
    toolbox.register("population", tools.initRepeat, list, toolbox.individual)
    toolbox.register("compile", gp.compile, pset=pset)
    def evalSymbReg(individual, points):
        func = toolbox.compile(expr=individual)
        sqerrors = ((func(x) - (2*x**3 - 3*x**2 + 4*x - 1))**2 for x in points)
        return math.fsum(sqerrors) / len(points),
    points = [x/10. for x in range(-10, 10)]
    toolbox.register("evaluate", evalSymbReg, points=points)
    toolbox.register("select", tools.selTournament, tournsize=3); toolbox.register("mate", gp.cxOnePoint)
    toolbox.register("expr_mut", gp.genFull, min_=0, max_=2)
    toolbox.register("mutate", gp.mutUniform, expr=toolbox.expr_mut, pset=pset)
    pop = toolbox.population(n=pop_size)
    hof = tools.HallOfFame(1)
    algorithms.eaSimple(pop, toolbox, 0.5, 0.1, ngen, halloffame=hof, verbose=False)
    return hof[0], toolbox.compile(expr=hof[0])

@st.cache_data
def load_recommender_data():
    with open('ratings.json', 'r') as f:
        return json.load(f)

def pearson_score(dataset, user1, user2):
    common_movies = {item for item in dataset[user1] if item in dataset[user2]}
    if not common_movies: return 0
    sum1 = sum(dataset[user1][item] for item in common_movies)
    sum2 = sum(dataset[user2][item] for item in common_movies)
    p_sum = sum(dataset[user1][item] * dataset[user2][item] for item in common_movies)
    sum1_sq = sum(pow(dataset[user1][item], 2) for item in common_movies)
    sum2_sq = sum(pow(dataset[user2][item], 2) for item in common_movies)
    num = p_sum - (sum1 * sum2 / len(common_movies))
    den = np.sqrt((sum1_sq - pow(sum1, 2) / len(common_movies)) * (sum2_sq - pow(sum2, 2) / len(common_movies)))
    return 0 if den == 0 else num / den

# --- –§–£–ù–ö–¶–ò–ò-–†–ï–ù–î–ï–†–ï–†–´ ---

def render_chapter_1():
    st.title("–ß–∞—Å—Ç—å 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤")
    col1, col2 = st.columns([1, 2])
    with col1:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        target_sum = st.slider("–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã", 10, 100, 45, key="ch1_target")
        n_attr = st.slider("–î–ª–∏–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É—É–º–∞ (–±–∏—Ç)", 20, 150, 75, key="ch1_len")
        ngen = st.slider("–ß–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π", 10, 200, 60, key="ch1_ngen")
        cxpb = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è", 0.0, 1.0, 0.8, key="ch1_cxpb")
        mutpb = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏", 0.0, 1.0, 0.1, key="ch1_mutpb")
    with col2:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        best_individual, logbook = run_genetic_algorithm(target_sum, n_attr, ngen, cxpb, mutpb, 50)
        
        fig_conv, ax_conv = plt.subplots(figsize=(10, 5))
        ax_conv.plot(logbook.select("gen"), logbook.select("max"), "b-", label="–ú–∞–∫—Å. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
        ax_conv.plot(logbook.select("gen"), logbook.select("avg"), "r-", label="–°—Ä–µ–¥. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
        ax_conv.plot(logbook.select("gen"), logbook.select("min"), "g-", label="–ú–∏–Ω. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
        ax_conv.set_xlabel("–ü–æ–∫–æ–ª–µ–Ω–∏–µ"); ax_conv.set_ylabel("–ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
        ax_conv.set_title("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º"); ax_conv.legend(); ax_conv.grid(True)
        st.pyplot(fig_conv)

    st.markdown("---")
    st.subheader("–ü—Ä–æ—Ç–æ–∫–æ–ª —ç–≤–æ–ª—é—Ü–∏–∏ (Logbook)")
    logbook_df = pd.DataFrame(logbook)
    logbook_df = logbook_df.rename(columns={
        "gen": "–ü–æ–∫–æ–ª–µ–Ω–∏–µ", "evals": "–û—Ü–µ–Ω–µ–Ω–æ", "min": "–ú–∏–Ω.", 
        "max": "–ú–∞–∫—Å.", "avg": "–°—Ä–µ–¥.", "std": "–°—Ç. –æ—Ç–∫–ª."
    })
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å —Ü–≤–µ—Ç–æ–≤–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π –∑–∞–ª–∏–≤–∫–æ–π
    st.dataframe(logbook_df.style.background_gradient(
        cmap='viridis', subset=['–ú–∏–Ω.', '–ú–∞–∫—Å.', '–°—Ä–µ–¥.']
    ).background_gradient(
        cmap='plasma_r', subset=['–°—Ç. –æ—Ç–∫–ª.']
    ))
    st.info("""
    **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã:**
    - **–°—Ç–æ–ª–±—Ü—ã "–ú–∏–Ω.", "–ú–∞–∫—Å.", "–°—Ä–µ–¥.":** –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞ (–æ—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∫ –∂–µ–ª—Ç–æ–º—É) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ñ–µ–ª—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –∫–æ–Ω—Ü–µ –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—Å—è –ø–æ–ø—É–ª—è—Ü–∏—è –¥–æ—Å—Ç–∏–≥–ª–∞ –≤—ã—Å–æ–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.
    - **–°—Ç–æ–ª–±–µ—Ü "–°—Ç. –æ—Ç–∫–ª.":** –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞ (–æ—Ç –∂–µ–ª—Ç–æ–≥–æ –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è. –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ —è—á–µ–π–∫–∏ –≤ –∫–æ–Ω—Ü–µ ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ø—É–ª—è—Ü–∏—è —Å–æ—à–ª–∞—Å—å –∫ –æ–¥–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é.
    """)

def render_chapter_2():
    st.title("–ß–∞—Å—Ç—å 2: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é CMA-ES")
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã CMA-ES")
    ngen_cma = st.slider("–ß–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π", 50, 500, 125, key="ch2_ngen")
    sigma = st.slider("–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Sigma", 0.1, 10.0, 5.0, key="ch2_sigma")
    col1, col2 = st.columns(2)
    for col, func_name in zip([col1, col2], ["–†–∞—Å—Ç—Ä–∏–≥–∏–Ω", "–†–æ–∑–µ–Ω–±—Ä–æ–∫"]):
        with col:
            st.header(func_name)
            logbook_cma, hall_of_fame = run_cma_es(func_name, ngen_cma, sigma)
            st.metric("–ù–∞–π–¥–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º", f"{hall_of_fame[0].fitness.values[0]:.4f}")
            fig, axes = plt.subplots(2, 2, figsize=(10, 8)); fig.tight_layout(pad=3.0)
            axes[0, 0].plot(logbook_cma.select('gen'), logbook_cma.select('min'))
            axes[0, 0].set_title("–õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"); axes[0, 0].grid(True)
            axes[0, 1].plot(logbook_cma.select('gen'), logbook_cma.select('sigma'))
            axes[0, 1].set_title("–ó–Ω–∞—á–µ–Ω–∏–µ Sigma"); axes[0, 1].grid(True)
            axes[1, 0].semilogy(logbook_cma.select('gen'), logbook_cma.select('axis_ratio'))
            axes[1, 0].set_title("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Å–µ–π"); axes[1, 0].grid(True)
            axes[1, 1].semilogy(logbook_cma.select('gen'), [l['diagD'] for l in logbook_cma])
            axes[1, 1].set_title("–î–∏–∞–≥–æ–Ω–∞–ª—å D"); axes[1, 1].grid(True)
            st.pyplot(fig)

def render_chapter_3():
    st.title("–ß–∞—Å—Ç—å 3: –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è")
    col1, col2 = st.columns([1, 2])
    with col1:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ì–ü")
        ngen_gp = st.slider("–ß–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π", 10, 100, 40, key="ch3_ngen")
        pop_size_gp = st.slider("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏", 100, 1000, 300, key="ch3_pop")
        best_ind, compiled_func = run_symbolic_regression(ngen_gp, pop_size_gp)
        st.subheader("–ù–∞–π–¥–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"); st.code(str(best_ind))
        st.subheader("–î—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        try:
            nodes, edges, labels = gp.graph(best_ind)
            g = graphviz.Digraph(); g.attr('node', shape='circle')
            for i, node in enumerate(nodes): g.node(str(i), labels[i])
            for edge in edges: g.edge(str(edge[0]), str(edge[1]))
            st.graphviz_chart(g)
        except: st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ.")
    with col2:
        st.subheader("–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π")
        x = np.linspace(-1, 1, 100); y_true = 2*x**3 - 3*x**2 + 4*x - 1
        y_found = [compiled_func(val) for val in x]
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(x, y_true, 'b-', label="–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
        ax.plot(x, y_found, 'r--', label="–ù–∞–π–¥–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
        ax.legend(); ax.grid(True); st.pyplot(fig)

def render_chapter_4():
    st.title("–ß–∞—Å—Ç—å 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞")
    st.info("–ö–æ–Ω—Ü–µ–ø—Ü–∏—è: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º.")
    st.subheader("–ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∞ –ª—É—á—à–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    g = graphviz.Digraph(); g.attr('node', shape='box')
    g.node("0", "if_food_ahead"); g.node("1", "move_forward"); g.node("2", "progn2")
    g.node("3", "turn_left"); g.node("4", "move_forward")
    g.edge("0", "1"); g.edge("0", "2"); g.edge("2", "3"); g.edge("2", "4")
    st.graphviz_chart(g)
    st.warning("–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –≤ –¥–∞–Ω–Ω–æ–º –¥–µ–º–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

def render_chapter_5():
    st.title("–ß–∞—Å—Ç—å 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    data = load_recommender_data()
    users = list(data.keys())
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        selected_user = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", users)
        if selected_user:
            scores = {other: pearson_score(data, selected_user, other) for other in users if other != selected_user}
            similar_users = sorted(scores.items(), key=lambda item: item[1], reverse=True)[:3]
            total_scores, similarity_sums = {}, {}
            for other, similarity in similar_users:
                if similarity <= 0: continue
                for item, rating in data[other].items():
                    if item not in data[selected_user]:
                        total_scores.setdefault(item, 0); total_scores[item] += rating * similarity
                        similarity_sums.setdefault(item, 0); similarity_sums[item] += similarity
            if not total_scores:
                st.warning("–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
            else:
                rankings = sorted([(score/similarity_sums[item], item) for item, score in total_scores.items()], reverse=True)
                st.dataframe(pd.DataFrame([m for _, m in rankings], columns=["–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã"]), use_container_width=True)
    with col2:
        st.subheader("–ú–µ—Ç–æ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–¥—Å—Ç–≤–∞")
        st.markdown("–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è '–ø–æ—Ö–æ–∂–µ—Å—Ç–∏' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è **–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞**. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ—Ü–µ–Ω–∫–∞–º–∏ –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        st.latex(r'''
        r = \frac{\sum_{i=1}^{n}(x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum_{i=1}^{n}(x_i - \bar{x})^2}\sqrt{\sum_{i=1}^{n}(y_i - \bar{y})^2}}
        ''')
        st.markdown(r"""
        - $r$: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–æ—Ç -1 –¥–æ 1). –ó–Ω–∞—á–µ–Ω–∏–µ `1` –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ö–æ–∂–µ—Å—Ç—å –≤–∫—É—Å–æ–≤.
        - $n$: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤, –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –æ–±–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        - $x_i, y_i$: –û—Ü–µ–Ω–∫–∏ $i$-–≥–æ —Ñ–∏–ª—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ X –∏ Y.
        - $\bar{x}, \bar{y}$: –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π X –∏ Y.
        """)


# --- –ì–õ–ê–í–ù–´–ô –†–û–£–¢–ï–† –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
st.sidebar.title("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞")
chapter = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", [
    "–ß–∞—Å—Ç—å 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤",
    "–ß–∞—Å—Ç—å 2: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ö–æ–¥–∞ —ç–≤–æ–ª—é—Ü–∏–∏ (CMA-ES)",
    "–ß–∞—Å—Ç—å 3: –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è",
    "–ß–∞—Å—Ç—å 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–æ–±–æ—Ç–∞",
    "–ß–∞—Å—Ç—å 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
])

if chapter == "–ß–∞—Å—Ç—å 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤": render_chapter_1()
elif chapter == "–ß–∞—Å—Ç—å 2: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ö–æ–¥–∞ —ç–≤–æ–ª—é—Ü–∏–∏ (CMA-ES)": render_chapter_2()
elif chapter == "–ß–∞—Å—Ç—å 3: –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è": render_chapter_3()
elif chapter == "–ß–∞—Å—Ç—å 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–æ–±–æ—Ç–∞": render_chapter_4()
elif chapter == "–ß–∞—Å—Ç—å 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": render_chapter_5()
