import streamlit as st
from deap import base, algorithms, creator, tools
from deap.algorithms import varAnd  # –ò–º–ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤ algelitism.py
import random
import matplotlib.pyplot as plt
import numpy as np
import time

# --- –ö–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ algelitism.py ---
# –Ø –≤—Å—Ç–∞–≤–∏–ª –µ–≥–æ –ø—Ä—è–º–æ —Å—é–¥–∞

def eaSimpleElitism(population, toolbox, cxpb, mutpb, ngen, stats=None,
             halloffame=None, verbose=__debug__, callback=None):
    """–ü–µ—Ä–µ–¥–µ–ª–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º eaSimple —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —ç–ª–∏—Ç–∏–∑–º–∞
    """

    logbook = tools.Logbook()
    logbook.header = ['gen', 'nevals'] + (stats.fields if stats else [])

    # Evaluate the individuals with an invalid fitness
    invalid_ind = [ind for ind in population if not ind.fitness.valid]
    fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
    for ind, fit in zip(invalid_ind, fitnesses):
        ind.fitness.values = fit

    if halloffame is not None:
        halloffame.update(population)

    hof_size = len(halloffame.items) if halloffame.items else 0

    record = stats.compile(population) if stats else {}
    logbook.record(gen=0, nevals=len(invalid_ind), **record)
    if verbose:
        print(logbook.stream)

    # Begin the generational process
    for gen in range(1, ngen + 1):
        # Select the next generation individuals
        offspring = toolbox.select(population, len(population) - hof_size)

        # Vary the pool of individuals
        offspring = varAnd(offspring, toolbox, cxpb, mutpb)

        # Evaluate the individuals with an invalid fitness
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit

        offspring.extend(halloffame.items)

        # Update the hall of fame with the generated individuals
        if halloffame is not None:
            halloffame.update(offspring)

        # Replace the current population by the offspring
        population[:] = offspring

        # Append the current generation statistics to the logbook
        record = stats.compile(population) if stats else {}
        logbook.record(gen=gen, nevals=len(invalid_ind), **record)
        if verbose:
            print(logbook.stream)

        if callback:
            callback[0](*callback[1])

    return population, logbook

# --- –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ –∏–∑ algelitism.py ---


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DEAP ---
LOW, UP = -5, 5
ETA = 20
LENGTH_CHROM = 2
HALL_OF_FAME_SIZE = 5

RANDOM_SEED = 42
random.seed(RANDOM_SEED)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DEAP
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)

def randomPoint(a, b):
    return [random.uniform(a, b), random.uniform(a, b)]

def himmelblau(individual):
    x, y = individual
    f = (x ** 2 + y - 11) ** 2 + (x + y ** 2 - 7) ** 2
    return f,

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Streamlit ---

@st.cache_data
def run_ga(pop_size, max_gen, cxpb, mutpb):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç GA –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—É–ª—è—Ü–∏–π –∏ –ª–æ–≥–±—É–∫.
    """
    toolbox = base.Toolbox()
    toolbox.register("randomPoint", randomPoint, LOW, UP)
    toolbox.register("individualCreator", tools.initIterate, creator.Individual, toolbox.randomPoint)
    toolbox.register("populationCreator", tools.initRepeat, list, toolbox.individualCreator)
    
    toolbox.register("evaluate", himmelblau)
    toolbox.register("select", tools.selTournament, tournsize=3)
    toolbox.register("mate", tools.cxSimulatedBinaryBounded, low=LOW, up=UP, eta=ETA)
    toolbox.register("mutate", tools.mutPolynomialBounded, low=LOW, up=UP, eta=ETA, indpb=1.0/LENGTH_CHROM)
    
    population = toolbox.populationCreator(n=pop_size)
    hof = tools.HallOfFame(HALL_OF_FAME_SIZE)
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("min", np.min)
    stats.register("avg", np.mean)

    population_history = []
    
    def record_history(population, *args):
        population_history.append(population[:])

    # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    # –ú—ã —É–±—Ä–∞–ª–∏ 'algelitism.' –∏ —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    pop, logbook = eaSimpleElitism(population, toolbox,
                                    cxpb=cxpb,
                                    mutpb=mutpb,
                                    ngen=max_gen,
                                    halloffame=hof,
                                    stats=stats,
                                    callback=(record_history, ()), 
                                    verbose=False)

    return logbook, population_history, hof

def plot_population(population, generation_num, xgrid, ygrid, f_himmelbalu, ax):
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ (–æ–¥–Ω–æ –ø–æ–∫–æ–ª–µ–Ω–∏–µ).
    """
    ptMins = [[3.0, 2.0], [-2.805118, 3.131312], [-3.779310, -3.283186], [3.584458, -1.848126]]
    
    ax.clear()
    ax.contour(xgrid, ygrid, f_himmelbalu, levels=20)
    ax.scatter(*zip(*ptMins), marker='X', color='red', zorder=2, s=150, label="–ò—Å—Ç–∏–Ω–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã")
    
    pop_x = [ind[0] for ind in population]
    pop_y = [ind[1] for ind in population]
    ax.scatter(pop_x, pop_y, color='green', s=10, zorder=1, alpha=0.7, label="–ü–æ–ø—É–ª—è—Ü–∏—è")
    
    ax.set_title(f"–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {generation_num}")
    ax.set_xlabel("X")
    ax.set_ylabel("Y")
    ax.set_xlim(LOW-1, UP+1)
    ax.set_ylim(LOW-1, UP+1)
    ax.legend()

def plot_convergence(logbook):
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    minFitnessValues, meanFitnessValues = logbook.select("min", "avg")
    
    fig, ax = plt.subplots(figsize=(10, 3))
    ax.plot(minFitnessValues, color='red', label="–ú–∏–Ω. (–ª—É—á—à–∞—è) –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
    ax.plot(meanFitnessValues, color='green', label="–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
    ax.set_xlabel('–ü–æ–∫–æ–ª–µ–Ω–∏–µ')
    ax.set_ylabel('–ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å')
    ax.set_title('–ì—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏')
    ax.legend()
    return fig

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---

st.set_page_config(layout="wide")
st.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ê–ª–≥–æ—Ä–∏—Ç–º üß¨")
st.write("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –•–∏–º–º–µ–ª—å–±–ª–∞—É —Å –ø–æ–º–æ—â—å—é `DEAP` –∏ `Streamlit`")

# --- 1. –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–∑—É–Ω–∫–∞–º–∏ ---
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ê–ª–≥–æ—Ä–∏—Ç–º–∞")
P_CROSSOVER = st.sidebar.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è (cxpb)", 0.0, 1.0, 0.9, 0.05)
P_MUTATION = st.sidebar.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏ (mutpb)", 0.0, 1.0, 0.2, 0.05)
POPULATION_SIZE = st.sidebar.slider("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏", 50, 500, 200, 10)
MAX_GENERATIONS = st.sidebar.slider("–ú–∞–∫—Å. —á–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π (ngen)", 10, 100, 50, 5)

# --- 2. –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ---
if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"):
    with st.spinner("–ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..."):
        logbook, history, hof = run_ga(POPULATION_SIZE, MAX_GENERATIONS, P_CROSSOVER, P_MUTATION)
        
        st.session_state.logbook = logbook
        st.session_state.history = history
        st.session_state.hof = hof
        st.session_state.run_completed = True
        st.success("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# --- 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
if 'run_completed' in st.session_state:
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    if 'xgrid' not in st.session_state:
        x = np.arange(LOW-1, UP+1, 0.1)
        y = np.arange(LOW-1, UP+1, 0.1)
        st.session_state.xgrid, st.session_state.ygrid = np.meshgrid(x, y)
        st.session_state.f_himmelbalu = (st.session_state.xgrid**2 + st.session_state.ygrid - 11)**2 + \
                                       (st.session_state.xgrid + st.session_state.ygrid**2 - 7)**2

    st.subheader("–≠–≤–æ–ª—é—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏")
    history = st.session_state.history
    
    gen_to_show = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", 0, len(history) - 1, 0)
    
    fig_pop, ax_pop = plt.subplots(figsize=(7, 7))
    plot_population(history[gen_to_show], 
                    gen_to_show, 
                    st.session_state.xgrid, 
                    st.session_state.ygrid, 
                    st.session_state.f_himmelbalu,
                    ax_pop)
    
    col1, col2 = st.columns([1.5, 1])
    
    with col1:
        st.pyplot(fig_pop)
    
    with col2:
        st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        fig_conv = plot_convergence(st.session_state.logbook)
        st.pyplot(fig_conv)
        
        st.subheader("–õ—É—á—à–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        best_ind = st.session_state.hof.items[0]
        best_fitness = himmelblau(best_ind)[0]
        st.metric("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (X, Y)", f"[{best_ind[0]:.4f}, {best_ind[1]:.4f}]")
        st.metric("–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (min)", f"{best_fitness:.6f}")
