import streamlit as st
import random
import numpy as np
import matplotlib.pyplot as plt
from deap import base, creator, tools, algorithms

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´ ---
st.set_page_config(
    layout="wide",
    page_title="–ê–Ω–∞–ª–∏–∑ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ê–ª–≥–æ—Ä–∏—Ç–º–∞",
    page_icon="üß¨"
)

# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–û–í DEAP (–¥–µ–ª–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑) ---
try:
    creator.create("FitnessMax", base.Fitness, weights=(1.0,))
    creator.create("Individual", list, fitness=creator.FitnessMax)
except Exception:
    pass

# --- –§–£–ù–ö–¶–ò–Ø-–í–´–ß–ò–°–õ–ò–¢–ï–õ–¨ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏) ---
@st.cache_data
def run_genetic_algorithm(target_sum, n_attr, ngen, cxpb, mutpb, pop_size):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ê–ª–≥–æ—Ä–∏—Ç–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
    toolbox = base.Toolbox()
    toolbox.register("attr_bool", random.randint, 0, 1)
    toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_bool, n=n_attr)
    toolbox.register("population", tools.initRepeat, list, toolbox.individual)

    def eval_func(individual):
        return len(individual) - abs(sum(individual) - target_sum),

    toolbox.register("evaluate", eval_func)
    toolbox.register("mate", tools.cxTwoPoint)
    toolbox.register("mutate", tools.mutFlipBit, indpb=0.05)
    toolbox.register("select", tools.selTournament, tournsize=3)

    population = toolbox.population(n=pop_size)
    initial_pop = [list(ind) for ind in population] # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–∏–Ω–∏–º—É–º—É –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", np.mean)
    stats.register("max", np.max)
    stats.register("min", np.min)
    stats.register("std", np.std)

    final_pop_obj, logbook = algorithms.eaSimple(population, toolbox, cxpb=cxpb, mutpb=mutpb, ngen=ngen,
                                                  stats=stats, verbose=False)
    
    best_individual = tools.selBest(final_pop_obj, k=1)[0]
    final_pop = [list(ind) for ind in final_pop_obj] # –ö–æ–ø–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏

    return best_individual, logbook, initial_pop, final_pop


# --- –§–£–ù–ö–¶–ò–ò-–û–¢–†–ò–°–û–í–©–ò–ö–ò –ì–†–ê–§–ò–ö–û–í ---

def create_population_heatmap(population, title):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏."""
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.imshow(population, cmap='gray', interpolation='none', aspect='auto')
    ax.set_title(title)
    ax.set_xlabel("–ì–µ–Ω—ã (–±–∏—Ç—ã)")
    ax.set_ylabel("–ò–Ω–¥–∏–≤–∏–¥—É—É–º—ã")
    return fig

def create_convergence_plot(logbook):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (min, avg, max)."""
    fig, ax = plt.subplots(figsize=(10, 5))
    gen = logbook.select("gen")
    max_vals = logbook.select("max")
    avg_vals = logbook.select("avg")
    min_vals = logbook.select("min")
    
    ax.plot(gen, max_vals, "b-", label="–ú–∞–∫—Å. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
    ax.plot(gen, avg_vals, "r-", label="–°—Ä–µ–¥. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
    ax.plot(gen, min_vals, "g-", label="–ú–∏–Ω. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
    
    ax.set_xlabel("–ü–æ–∫–æ–ª–µ–Ω–∏–µ")
    ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏")
    ax.set_title("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º")
    ax.legend(loc="lower right")
    ax.grid(True)
    return fig

def create_diversity_plot(logbook):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)."""
    fig, ax = plt.subplots(figsize=(10, 5))
    gen = logbook.select("gen")
    std_vals = logbook.select("std")
    
    ax.plot(gen, std_vals, "m-", label="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")
    
    ax.set_xlabel("–ü–æ–∫–æ–ª–µ–Ω–∏–µ")
    ax.set_ylabel("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏")
    ax.set_title("–î–∏–Ω–∞–º–∏–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è")
    ax.legend(loc="upper right")
    ax.grid(True)
    return fig

# --- –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---

st.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ê–ª–≥–æ—Ä–∏—Ç–º–∞")
st.markdown("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏—Ç–æ–≤—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.")

col1, col2 = st.columns([1, 2]) # –ü—Ä–æ–ø–æ—Ä—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ 1:2

with col1:
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    target_sum = st.slider("–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã", 10, 100, 45)
    n_attr = st.slider("–î–ª–∏–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É—É–º–∞ (–±–∏—Ç)", 20, 150, 75)
    ngen = st.slider("–ß–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π", 10, 200, 60)
    pop_size = st.slider("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏", 20, 200, 50)
    cxpb = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è", 0.0, 1.0, 0.8)
    mutpb = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏", 0.0, 1.0, 0.1)
    
    st.info("""
    **–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏:** `–î–ª–∏–Ω–∞ - abs(–°—É–º–º–∞ - –¶–µ–ª—å)`

    **–ú–µ—Ö–∞–Ω–∏–∑–º—ã:**
    - **–°–µ–ª–µ–∫—Ü–∏—è:** –¢—É—Ä–Ω–∏—Ä–Ω–∞—è (`size=3`)
    - **–°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ:** –î–≤—É—Ö—Ç–æ—á–µ—á–Ω–æ–µ
    - **–ú—É—Ç–∞—Ü–∏—è:** –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏—Ç–∞
    """)

with col2:
    # –ó–∞–ø—É—Å–∫ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
    best_ind, logbook, initial_pop, final_pop = run_genetic_algorithm(target_sum, n_attr, ngen, cxpb, mutpb, pop_size)

    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    # --- –ë–ª–æ–∫ —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ ---
    sub_col1, sub_col2 = st.columns(2)
    sub_col1.metric("–§–∏–Ω–∞–ª—å–Ω–∞—è –º–∞–∫—Å. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å", f"{best_ind.fitness.values[0]:.2f}")
    sub_col2.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –≤ –ª—É—á—à–µ–º —Ä–µ—à–µ–Ω–∏–∏", f"{sum(best_ind)}")
    st.write("**–õ—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É—É–º:**")
    st.code(''.join(map(str, best_ind)), language=None)

    st.markdown("---")
    
    # --- –ë–ª–æ–∫ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ–ø—É–ª—è—Ü–∏–π ---
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–π")
    vis_col1, vis_col2 = st.columns(2)
    with vis_col1:
        st.pyplot(create_population_heatmap(initial_pop, "–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è (–ü–æ–∫–æ–ª–µ–Ω–∏–µ 0)"))
    with vis_col2:
        st.pyplot(create_population_heatmap(final_pop, f"–ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è (–ü–æ–∫–æ–ª–µ–Ω–∏–µ {ngen})"))
    st.markdown("""
    –ù–∞ —ç—Ç–∏—Ö —Ç–µ–ø–ª–æ–≤—ã—Ö –∫–∞—Ä—Ç–∞—Ö –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É—É–º–∞, –∞ –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü ‚Äî –≥–µ–Ω (–±–∏—Ç). 
    –ë–µ–ª—ã–π —Ü–≤–µ—Ç ‚Äî 1, —á–µ—Ä–Ω—ã–π ‚Äî 0. –í–∏–¥–Ω–æ, –∫–∞–∫ –ø–æ–ø—É–ª—è—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ "—à—É–º–∞" –∫ –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.
    """)
    
    st.markdown("---")

    # --- –ë–ª–æ–∫ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —ç–≤–æ–ª—é—Ü–∏–∏ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö ---
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–∏")
    tab1, tab2 = st.tabs(["–°—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏", "–î–∏–Ω–∞–º–∏–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"])
    
    with tab1:
        st.pyplot(create_convergence_plot(logbook))
        st.info("""
        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏:**
        - **–ú–∞–∫—Å. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ª—É—á—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏.
        - **–ú–∏–Ω. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ö—É–¥—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
        - –ü–æ –º–µ—Ä–µ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞, "–ø–ª–æ—Ö–∏–µ" —Ä–µ—à–µ–Ω–∏—è –æ—Ç—Å–µ–∏–≤–∞—é—Ç—Å—è, –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç. –°–±–ª–∏–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –ª–∏–Ω–∏–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –≤—Å—è –ø–æ–ø—É–ª—è—Ü–∏—è —Å–æ—à–ª–∞—Å—å –∫ —Å—Ö–æ–∂–∏–º, –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º.
        """)
        
    with tab2:
        st.pyplot(create_diversity_plot(logbook))
        st.info("""
        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è:**
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ** —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ä–æ–π –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏.
        - –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –æ–∑–Ω–∞—á–∞–µ—Ç –±–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ—à–µ–Ω–∏–π.
        - –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –¥–æ –Ω–∏–∑–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ø—É–ª—è—Ü–∏—è —Ç–µ—Ä—è–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏ —Å—Ö–æ–¥–∏—Ç—Å—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –æ–ø—Ç–∏–º—É–º—É.
        """)
