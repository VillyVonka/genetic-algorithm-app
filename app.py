import streamlit as st
from deap import base, algorithms
from deap import creator
from deap import tools
import algelitism  # –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
import random
import matplotlib.pyplot as plt
import numpy as np
import time

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DEAP ---
# (–ü–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –≤–∞—à–µ–≥–æ ga_9.py)

LOW, UP = -5, 5
ETA = 20
LENGTH_CHROM = 2
HALL_OF_FAME_SIZE = 5

RANDOM_SEED = 42
random.seed(RANDOM_SEED)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DEAP
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)

def randomPoint(a, b):
    return [random.uniform(a, b), random.uniform(a, b)]

def himmelblau(individual):
    x, y = individual
    f = (x ** 2 + y - 11) ** 2 + (x + y ** 2 - 7) ** 2
    return f,

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Streamlit ---

# @st.cache_data –∫–µ—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
# –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ GA –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑,
# –∫–æ–≥–¥–∞ –≤—ã –¥–≤–∏–≥–∞–µ—Ç–µ –ø–æ–ª–∑—É–Ω–æ–∫ "–ü–æ–∫–æ–ª–µ–Ω–∏–µ".
@st.cache_data
def run_ga(pop_size, max_gen, cxpb, mutpb):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç GA –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—É–ª—è—Ü–∏–π –∏ –ª–æ–≥–±—É–∫.
    """
    toolbox = base.Toolbox()
    toolbox.register("randomPoint", randomPoint, LOW, UP)
    toolbox.register("individualCreator", tools.initIterate, creator.Individual, toolbox.randomPoint)
    toolbox.register("populationCreator", tools.initRepeat, list, toolbox.individualCreator)
    
    toolbox.register("evaluate", himmelblau)
    toolbox.register("select", tools.selTournament, tournsize=3)
    toolbox.register("mate", tools.cxSimulatedBinaryBounded, low=LOW, up=UP, eta=ETA)
    toolbox.register("mutate", tools.mutPolynomialBounded, low=LOW, up=UP, eta=ETA, indpb=1.0/LENGTH_CHROM)
    
    population = toolbox.populationCreator(n=pop_size)
    hof = tools.HallOfFame(HALL_OF_FAME_SIZE)
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("min", np.min)
    stats.register("avg", np.mean)

    # --- –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ---
    # –ú—ã –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—É–ª—è—Ü–∏–π –∑–¥–µ—Å—å
    population_history = []
    
    # –ö–∞—Å—Ç–æ–º–Ω–∞—è callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    def record_history(population, *args):
        population_history.append(population[:]) # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é

    # –ó–∞–ø—É—Å–∫–∞–µ–º GA —Å –Ω–∞—à–∏–º –∫–æ–ª–±—ç–∫–æ–º
    pop, logbook = algelitism.eaSimpleElitism(population, toolbox,
                                            cxpb=cxpb,
                                            mutpb=mutpb,
                                            ngen=max_gen,
                                            halloffame=hof,
                                            stats=stats,
                                            # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
                                            callback=(record_history, ()), 
                                            verbose=False) # –û—Ç–∫–ª—é—á–∞–µ–º print –≤ –∫–æ–Ω—Å–æ–ª—å

    return logbook, population_history, hof

def plot_population(population, generation_num, xgrid, ygrid, f_himmelbalu, ax):
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ (–æ–¥–Ω–æ –ø–æ–∫–æ–ª–µ–Ω–∏–µ).
    """
    ptMins = [[3.0, 2.0], [-2.805118, 3.131312], [-3.779310, -3.283186], [3.584458, -1.848126]]
    
    ax.clear()
    ax.contour(xgrid, ygrid, f_himmelbalu, levels=20)
    ax.scatter(*zip(*ptMins), marker='X', color='red', zorder=2, s=150, label="–ò—Å—Ç–∏–Ω–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –Ω–∞ X –∏ Y
    pop_x = [ind[0] for ind in population]
    pop_y = [ind[1] for ind in population]
    ax.scatter(pop_x, pop_y, color='green', s=10, zorder=1, alpha=0.7, label="–ü–æ–ø—É–ª—è—Ü–∏—è")
    
    ax.set_title(f"–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {generation_num}")
    ax.set_xlabel("X")
    ax.set_ylabel("Y")
    ax.set_xlim(LOW-1, UP+1)
    ax.set_ylim(LOW-1, UP+1)
    ax.legend()

def plot_convergence(logbook):
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    minFitnessValues, meanFitnessValues = logbook.select("min", "avg")
    
    fig, ax = plt.subplots(figsize=(10, 3))
    ax.plot(minFitnessValues, color='red', label="–ú–∏–Ω. (–ª—É—á—à–∞—è) –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
    ax.plot(meanFitnessValues, color='green', label="–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å")
    ax.set_xlabel('–ü–æ–∫–æ–ª–µ–Ω–∏–µ')
    ax.set_ylabel('–ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å')
    ax.set_title('–ì—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏')
    ax.legend()
    return fig

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---

st.set_page_config(layout="wide")
st.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ê–ª–≥–æ—Ä–∏—Ç–º üß¨")
st.write("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –•–∏–º–º–µ–ª—å–±–ª–∞—É —Å –ø–æ–º–æ—â—å—é `DEAP` –∏ `Streamlit`")

# --- 1. –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–∑—É–Ω–∫–∞–º–∏ ---
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ê–ª–≥–æ—Ä–∏—Ç–º–∞")
P_CROSSOVER = st.sidebar.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è (cxpb)", 0.0, 1.0, 0.9, 0.05)
P_MUTATION = st.sidebar.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏ (mutpb)", 0.0, 1.0, 0.2, 0.05)
POPULATION_SIZE = st.sidebar.slider("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏", 50, 500, 200, 10)
MAX_GENERATIONS = st.sidebar.slider("–ú–∞–∫—Å. —á–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π (ngen)", 10, 100, 50, 5)

# --- 2. –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ---
if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"):
    with st.spinner("–ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..."):
        logbook, history, hof = run_ga(POPULATION_SIZE, MAX_GENERATIONS, P_CROSSOVER, P_MUTATION)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ 'session_state'
        # —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø—Ä–æ–ø–∞–ª–∏ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª–∑—É–Ω–∫–∞
        st.session_state.logbook = logbook
        st.session_state.history = history
        st.session_state.hof = hof
        st.session_state.run_completed = True
        st.success("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# --- 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
if 'run_completed' in st.session_state:
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–¥–µ–ª–∞–µ–º 1 —Ä–∞–∑)
    if 'xgrid' not in st.session_state:
        x = np.arange(LOW-1, UP+1, 0.1)
        y = np.arange(LOW-1, UP+1, 0.1)
        st.session_state.xgrid, st.session_state.ygrid = np.meshgrid(x, y)
        st.session_state.f_himmelbalu = (st.session_state.xgrid**2 + st.session_state.ygrid - 11)**2 + \
                                       (st.session_state.xgrid + st.session_state.ygrid**2 - 7)**2

    # --- 3.1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª–∑—É–Ω–æ–∫ –ø–æ–∫–æ–ª–µ–Ω–∏–π ---
    st.subheader("–≠–≤–æ–ª—é—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏")
    
    history = st.session_state.history
    
    # –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    gen_to_show = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", 0, len(history) - 1, 0)
    
    # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    fig_pop, ax_pop = plt.subplots(figsize=(7, 7))
    plot_population(history[gen_to_show], 
                    gen_to_show, 
                    st.session_state.xgrid, 
                    st.session_state.ygrid, 
                    st.session_state.f_himmelbalu,
                    ax_pop)
    
    # --- 3.2. –í—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    
    col1, col2 = st.columns([1.5, 1]) # –î–µ–ª–∏–º —ç–∫—Ä–∞–Ω –Ω–∞ 2 –∫–æ–ª–æ–Ω–∫–∏
    
    with col1:
        st.pyplot(fig_pop) # –ì—Ä–∞—Ñ–∏–∫ —Å –ø–æ–ø—É–ª—è—Ü–∏–µ–π
    
    with col2:
        st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        fig_conv = plot_convergence(st.session_state.logbook)
        st.pyplot(fig_conv) # –ì—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        st.subheader("–õ—É—á—à–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        best_ind = st.session_state.hof.items[0]
        best_fitness = himmelblau(best_ind)[0]
        st.metric("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (X, Y)", f"[{best_ind[0]:.4f}, {best_ind[1]:.4f}]")
        st.metric("–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (min)", f"{best_fitness:.6f}")
